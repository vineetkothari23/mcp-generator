# {{ project_name }} Logging Configuration
# Generated by mcp-cli
# Python logging configuration for MCP (Model Context Protocol) server

version: 1
disable_existing_loggers: false

# Formatters define the output format of log records
formatters:
  # Standard formatter for general logging
  standard:
    format: '[%(asctime)s] %(levelname)-8s | %(name)-20s | %(message)s'
    datefmt: '%Y-%m-%d %H:%M:%S'
  
  # Detailed formatter for debugging
  detailed:
    format: '[%(asctime)s] %(levelname)-8s | %(name)-25s | %(filename)s:%(lineno)d | %(funcName)s() | %(message)s'
    datefmt: '%Y-%m-%d %H:%M:%S'
  
  # JSON formatter for structured logging
  json:
    format: '{"timestamp": "%(asctime)s", "level": "%(levelname)s", "logger": "%(name)s", "module": "%(module)s", "function": "%(funcName)s", "line": %(lineno)d, "message": "%(message)s"}'
    datefmt: '%Y-%m-%dT%H:%M:%S'
  
  # Simple formatter for console output
  simple:
    format: '%(levelname)s: %(message)s'
  
  # MCP-specific formatter for protocol events
  mcp_formatter:
    format: '[%(asctime)s] MCP-%(levelname)s | %(name)s | %(message)s'
    datefmt: '%Y-%m-%d %H:%M:%S'

# Filters can be used to provide additional filtering logic
filters:
  # Filter to only include MCP-related messages
  mcp_only:
    (): mcp_cli.logging_filters.MCPOnlyFilter
  
  # Filter to exclude sensitive information
  sensitive_filter:
    (): mcp_cli.logging_filters.SensitiveDataFilter

# Handlers define where log records are sent
handlers:
  # Console handler for interactive development
  console:
    class: logging.StreamHandler
    level: INFO
    formatter: simple
    stream: ext://sys.stdout
  
  # Console handler with detailed format for debugging
  console_debug:
    class: logging.StreamHandler
    level: DEBUG
    formatter: detailed
    stream: ext://sys.stdout
  
  # File handler for general application logs
  file_general:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: standard
    filename: logs/{{ project_name }}.log
    maxBytes: 52428800  # 50MB
    backupCount: 5
    encoding: utf-8
  
  # File handler for error logs only
  file_errors:
    class: logging.handlers.RotatingFileHandler
    level: ERROR
    formatter: detailed
    filename: logs/{{ project_name }}_errors.log
    maxBytes: 10485760  # 10MB
    backupCount: 3
    encoding: utf-8
  
  # File handler for MCP protocol events
  file_mcp_events:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: mcp_formatter
    filename: logs/{{ project_name }}_mcp_events.log
    maxBytes: 20971520  # 20MB
    backupCount: 5
    encoding: utf-8
    filters: [mcp_only]
  
  # JSON file handler for structured logging
  file_json:
    class: logging.handlers.TimedRotatingFileHandler
    level: INFO
    formatter: json
    filename: logs/{{ project_name }}_structured.log
    when: midnight
    interval: 1
    backupCount: 7
    encoding: utf-8
  
  # Syslog handler for production environments
  syslog:
    class: logging.handlers.SysLogHandler
    level: WARNING
    formatter: standard
    address: /dev/log
    facility: local0
  
  # Email handler for critical errors (configure SMTP settings)
  email:
    class: logging.handlers.SMTPHandler
    level: CRITICAL
    formatter: detailed
    mailhost: localhost
    fromaddr: noreply@{{ project_name }}.com
    toaddrs: [admin@{{ project_name }}.com]
    subject: '[{{ project_name }}] Critical Error'
    # credentials: [username, password]  # Uncomment and configure if needed
    # secure: []  # Uncomment for TLS

# Loggers define the logging hierarchy
loggers:
  # Root logger configuration
  root:
    level: INFO
    handlers: [console, file_general, file_errors]
    propagate: false
  
  # MCP-specific loggers
  mcp:
    level: DEBUG
    handlers: [file_mcp_events, console_debug]
    propagate: false
    qualname: mcp
  
  mcp.server:
    level: INFO
    handlers: [file_general, console]
    propagate: true
    qualname: mcp.server
  
  mcp.tools:
    level: DEBUG
    handlers: [file_mcp_events]
    propagate: true
    qualname: mcp.tools
  
  mcp.resources:
    level: DEBUG
    handlers: [file_mcp_events]
    propagate: true
    qualname: mcp.resources
  
  mcp.protocol:
    level: DEBUG
    handlers: [file_mcp_events]
    propagate: true
    qualname: mcp.protocol
  
  # Application-specific loggers
  {{ project_name | replace('-', '_') }}:
    level: DEBUG
    handlers: [file_general, console]
    propagate: false
    qualname: {{ project_name | replace('-', '_') }}
  
  {{ project_name | replace('-', '_') }}.api:
    level: INFO
    handlers: [file_general]
    propagate: true
    qualname: {{ project_name | replace('-', '_') }}.api
  
  {{ project_name | replace('-', '_') }}.auth:
    level: WARNING
    handlers: [file_general, file_errors]
    propagate: true
    qualname: {{ project_name | replace('-', '_') }}.auth
    filters: [sensitive_filter]
  
  # Third-party library loggers
  httpx:
    level: WARNING
    handlers: [file_general]
    propagate: false
    qualname: httpx
  
  urllib3:
    level: WARNING
    handlers: [file_general]
    propagate: false
    qualname: urllib3
  
  requests:
    level: WARNING
    handlers: [file_general]
    propagate: false
    qualname: requests
  
  asyncio:
    level: WARNING
    handlers: [file_general]
    propagate: false
    qualname: asyncio
  
  pydantic:
    level: INFO
    handlers: [file_general]
    propagate: false
    qualname: pydantic
  
  # Database loggers (if using databases)
  sqlalchemy:
    level: WARNING
    handlers: [file_general]
    propagate: false
    qualname: sqlalchemy
  
  sqlalchemy.engine:
    level: INFO
    handlers: [file_general]
    propagate: true
    qualname: sqlalchemy.engine
  
  # Testing logger
  {{ project_name | replace('-', '_') }}.testing:
    level: DEBUG
    handlers: [console_debug]
    propagate: false
    qualname: {{ project_name | replace('-', '_') }}.testing

# Environment-specific configurations
# These can be used to override settings based on environment variables

# Development environment
development:
  handlers:
    console:
      level: DEBUG
      formatter: detailed
    file_general:
      level: DEBUG
  loggers:
    root:
      level: DEBUG
    mcp:
      level: DEBUG
    {{ project_name | replace('-', '_') }}:
      level: DEBUG

# Production environment
production:
  handlers:
    console:
      level: WARNING
      formatter: simple
    file_general:
      level: INFO
    syslog:
      level: ERROR
  loggers:
    root:
      level: INFO
      handlers: [file_general, file_errors, syslog]
    mcp:
      level: INFO
    {{ project_name | replace('-', '_') }}:
      level: INFO
    # Disable debug loggers in production
    {{ project_name | replace('-', '_') }}.testing:
      level: CRITICAL

# Testing environment
testing:
  handlers:
    console:
      level: WARNING
      formatter: simple
    file_general:
      level: ERROR
      filename: logs/test_{{ project_name }}.log
  loggers:
    root:
      level: WARNING
    mcp:
      level: WARNING
    {{ project_name | replace('-', '_') }}:
      level: WARNING
    {{ project_name | replace('-', '_') }}.testing:
      level: DEBUG
      handlers: [console_debug]

# Custom configuration for specific use cases
configurations:
  # High-performance configuration (minimal logging)
  performance:
    handlers:
      console:
        level: ERROR
      file_general:
        level: WARNING
    loggers:
      root:
        level: WARNING
      mcp:
        level: WARNING
  
  # Debugging configuration (maximum verbosity)
  debug:
    handlers:
      console:
        level: DEBUG
        formatter: detailed
      file_general:
        level: DEBUG
        formatter: detailed
    loggers:
      root:
        level: DEBUG
      mcp:
        level: DEBUG
      {{ project_name | replace('-', '_') }}:
        level: DEBUG
      httpx:
        level: DEBUG
      urllib3:
        level: DEBUG
  
  # Security audit configuration
  security:
    handlers:
      file_security:
        class: logging.handlers.RotatingFileHandler
        level: INFO
        formatter: json
        filename: logs/{{ project_name }}_security.log
        maxBytes: 10485760
        backupCount: 10
    loggers:
      {{ project_name | replace('-', '_') }}.auth:
        level: INFO
        handlers: [file_security]
      {{ project_name | replace('-', '_') }}.access:
        level: INFO
        handlers: [file_security] 