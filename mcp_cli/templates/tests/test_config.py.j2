"""
{{ project_name }} - Configuration Tests

Unit tests for configuration management and validation.
Tests environment variable loading and validation logic.

Generated by mcp-cli tool.
"""

import pytest
import os
from pydantic import ValidationError
from src.mcp_{{ service_name }}.config import {{ service_name|pascal_case }}Config

class Test{{ service_name|pascal_case }}Config:
    """Test cases for {{ service_name|pascal_case }}Config"""
    
    def test_default_configuration(self):
        """Test configuration with default values"""
        config = {{ service_name|pascal_case }}Config()
        
        assert config.server_name == "{{ project_name }}"
        assert config.version == "{{ version }}"
        assert config.timeout == 30
        assert config.max_retries == 3
        assert config.max_tools == 50
        assert config.enable_resources is True
    
    def test_custom_configuration(self):
        """Test configuration with custom values"""
        custom_config = {
            "api_base_url": "https://custom.api.com",
            "api_key": "custom-key",
            "timeout": 60,
            "max_tools": 100
        }
        
        config = {{ service_name|pascal_case }}Config(**custom_config)
        
        assert config.api_base_url == "https://custom.api.com"
        assert config.api_key == "custom-key"
        assert config.timeout == 60
        assert config.max_tools == 100
    
    def test_environment_variable_loading(self, monkeypatch):
        """Test loading configuration from environment variables"""
        # Set environment variables
        monkeypatch.setenv("MCP_API_BASE_URL", "https://env.api.com")
        monkeypatch.setenv("MCP_API_KEY", "env-key")
        monkeypatch.setenv("MCP_TIMEOUT", "45")
        
        config = {{ service_name|pascal_case }}Config()
        
        assert config.api_base_url == "https://env.api.com"
        assert config.api_key == "env-key"
        assert config.timeout == 45
    
    def test_api_url_validation(self):
        """Test API URL validation"""
        # Valid URLs
        valid_urls = [
            "https://api.example.com",
            "http://localhost:8080",
            "https://api.example.com/v1"
        ]
        
        for url in valid_urls:
            config = {{ service_name|pascal_case }}Config(api_base_url=url)
            assert config.api_base_url == url.rstrip('/')
        
        # Invalid URLs
        with pytest.raises(ValidationError):
            {{ service_name|pascal_case }}Config(api_base_url="invalid-url")
        
        with pytest.raises(ValidationError):
            {{ service_name|pascal_case }}Config(api_base_url="ftp://example.com")
    
    def test_timeout_validation(self):
        """Test timeout validation"""
        # Valid timeout
        config = {{ service_name|pascal_case }}Config(timeout=30)
        assert config.timeout == 30
        
        # Invalid timeout (negative)
        with pytest.raises(ValidationError):
            {{ service_name|pascal_case }}Config(timeout=-1)
        
        # Invalid timeout (zero)
        with pytest.raises(ValidationError):
            {{ service_name|pascal_case }}Config(timeout=0) 