# {{ project_name }} - Project Summary

## Project Information
- **Project Name**: {{ project_name }}
- **Service Name**: {{ service_name }}
- **Description**: {{ description }}
- **Author**: {{ author }}
- **Version**: {{ version }}
- **Python Version**: {{ python_version }}
- **Test Framework**: {{ test_framework }}

## Generation Configuration
- **Docker Support**: {{ "Enabled" if include_docker else "Disabled" }}
- **CI/CD Support**: {{ "Enabled" if include_ci else "Disabled" }}

## Generated Files
This project was generated with **{{ file_count }}** files:

{% for file in files_created %}
- `{{ file.split('/')[-1] if '/' in file else file.split('\\')[-1] if '\\' in file else file }}`
{% endfor %}

## Project Structure
```
{{ project_name }}/
├── src/
│   └── mcp_{{ service_name }}/
│       ├── __init__.py
│       ├── server.py          # Main MCP server implementation
│       ├── tools.py           # MCP tools and functions
│       ├── client.py          # API client implementation
│       ├── models.py          # Data models
│       └── config.py          # Configuration management
├── tests/
│   ├── unit/                  # Unit tests
│   ├── fixtures/              # Test fixtures and data
│   └── conftest.py            # Pytest configuration
├── config/
│   ├── server_config.yaml     # Server configuration
│   └── logging.yaml           # Logging configuration
├── scripts/
│   └── run_server.py          # Server startup script
{% if include_docker %}├── docker/
│   ├── Dockerfile             # Docker container definition
│   └── docker-compose.yml     # Docker Compose configuration
{% endif %}├── requirements.txt           # Production dependencies
├── requirements-dev.txt       # Development dependencies
├── pyproject.toml             # Project configuration
├── pytest.ini                # Test configuration
├── .coveragerc                # Coverage configuration
├── .env.example               # Environment variables template
{% if include_docker %}├── .dockerignore              # Docker ignore patterns
{% endif %}└── README.md                  # Project documentation
```

## Getting Started

### Installation
```bash
# Install the package in development mode
pip install -e .

# Install development dependencies
pip install -r requirements-dev.txt
```

### Running the Server
```bash
# Using the startup script
python scripts/run_server.py

# Or directly
python -m mcp_{{ service_name }}.server
```

### Running Tests
```bash
# Run all tests
pytest

# Run with coverage
pytest --cov=mcp_{{ service_name }}

# Run specific test categories
pytest tests/unit/
```

{% if include_docker %}
### Docker Deployment
```bash
# Build and run with Docker Compose
cd docker/
docker-compose up --build

# Or build manually
docker build -t {{ project_name }} -f docker/Dockerfile .
docker run -p 8000:8000 {{ project_name }}
```
{% endif %}

## Development

### Project Configuration
The project uses `pyproject.toml` for configuration and dependency management. Key settings include:
- Python version requirement: {{ python_version }}+
- Test framework: {{ test_framework }}
- Package structure: `src/mcp_{{ service_name }}/`

### Adding New Tools
1. Define new tool functions in `src/mcp_{{ service_name }}/tools.py`
2. Register tools in the MCP server (`src/mcp_{{ service_name }}/server.py`)
3. Add corresponding tests in `tests/unit/`
4. Update documentation as needed

### Configuration Management
- Server settings: `config/server_config.yaml`
- Logging configuration: `config/logging.yaml`
- Environment variables: `.env` (copy from `.env.example`)

---

*This project was generated using MCP Generator* 