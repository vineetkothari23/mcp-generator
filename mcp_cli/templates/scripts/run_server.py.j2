#!/usr/bin/env python3
"""
{{ project_name }} - Server Startup Script

Production-ready startup script for the {{ service_name }} MCP server.
Handles configuration loading, logging setup, and graceful shutdown.

Generated by mcp-cli tool.
"""

import asyncio
import signal
import sys
import logging
from pathlib import Path

# Add src to Python path
src_path = Path(__file__).parent.parent / "src"
sys.path.insert(0, str(src_path))

from mcp_{{ service_name }}.server import {{ service_name|pascal_case }}Server
from mcp_{{ service_name }}.config import {{ service_name|pascal_case }}Config

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('logs/{{ service_name }}.log')
    ]
)

logger = logging.getLogger(__name__)

class ServerManager:
    """Manages server lifecycle and graceful shutdown"""
    
    def __init__(self):
        self.server = None
        self.shutdown_event = asyncio.Event()
    
    def setup_signal_handlers(self):
        """Setup signal handlers for graceful shutdown"""
        if sys.platform != 'win32':
            for sig in [signal.SIGTERM, signal.SIGINT]:
                signal.signal(sig, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """Handle shutdown signals"""
        logger.info(f"Received signal {signum}, initiating graceful shutdown...")
        self.shutdown_event.set()
    
    async def start_server(self):
        """Start the MCP server with proper error handling"""
        try:
            # Load configuration
            logger.info("Loading configuration...")
            config = {{ service_name|pascal_case }}Config()
            
            # Create and configure server
            logger.info("Initializing {{ project_name }} MCP server...")
            self.server = {{ service_name|pascal_case }}Server(config)
            
            # Setup signal handlers
            self.setup_signal_handlers()
            
            # Start server
            logger.info(f"Starting server on {config.host}:{config.port}")
            
            # Run server and wait for shutdown signal
            server_task = asyncio.create_task(self.server.start())
            shutdown_task = asyncio.create_task(self.shutdown_event.wait())
            
            # Wait for either server completion or shutdown signal
            done, pending = await asyncio.wait(
                [server_task, shutdown_task],
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # Cancel pending tasks
            for task in pending:
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
            
            logger.info("Server startup completed")
            
        except Exception as e:
            logger.error(f"Failed to start server: {e}")
            raise
        finally:
            if self.server:
                logger.info("Stopping server...")
                await self.server.stop()
                logger.info("Server stopped")

async def main():
    """Main entry point"""
    # Create logs directory
    Path("logs").mkdir(exist_ok=True)
    
    logger.info("Starting {{ project_name }} MCP Server")
    logger.info(f"Python version: {sys.version}")
    logger.info(f"Working directory: {Path.cwd()}")
    
    manager = ServerManager()
    
    try:
        await manager.start_server()
    except KeyboardInterrupt:
        logger.info("Received keyboard interrupt")
    except Exception as e:
        logger.error(f"Server error: {e}")
        sys.exit(1)
    finally:
        logger.info("{{ project_name }} MCP Server shutdown complete")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Shutdown requested by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        sys.exit(1) 