"""
{{ project_name }} - MCP Tools

MCP tool implementations for {{ service_name }}.
Each tool corresponds to a specific capability or API operation.

Generated by mcp-cli tool.
"""

import logging
from typing import Dict, Any, List, Optional
from mcp.server import Server
from mcp.types import Tool, TextContent

from .client import {{ service_name|pascal_case }}Client
from .models import ToolResult

logger = logging.getLogger(__name__)

class {{ service_name|pascal_case }}Tools:
    """
    MCP tools implementation for {{ service_name }}
    
    Provides MCP-compliant tools for accessing {{ service_name }} functionality.
    """
    
    def __init__(self, server: Server, client: {{ service_name|pascal_case }}Client):
        """
        Initialize tools with server and client
        
        Args:
            server: MCP server instance
            client: API client for making requests
        """
        self.server = server
        self.client = client
        self._register_tools()
    
    def _register_tools(self):
        """Register all tools with the MCP server"""
        # Tools are registered via decorators below
        pass
    
    async def list_available_tools(self) -> List[Tool]:
        """
        Get list of all available tools
        
        Returns:
            List[Tool]: Available MCP tools
        """
        tools = [
            Tool(
                name="hello_world",
                description="Simple hello world tool for testing",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Name to greet"
                        }
                    },
                    "required": ["name"]
                }
            )
        ]
        return tools
    
    async def execute_tool(self, name: str, arguments: Dict[str, Any]) -> Any:
        """
        Execute a tool by name
        
        Args:
            name: Tool name to execute
            arguments: Tool arguments
            
        Returns:
            Any: Tool execution result
        """
        if name == "hello_world":
            return await self._hello_world(arguments)
        
        raise ValueError(f"Unknown tool: {name}")
    
    async def _hello_world(self, arguments: Dict[str, Any]) -> str:
        """
        Simple hello world tool
        
        Args:
            arguments: Tool arguments containing 'name'
            
        Returns:
            str: Greeting message
        """
        name = arguments.get("name", "World")
        return f"Hello, {name}! This is {{ project_name }}." 