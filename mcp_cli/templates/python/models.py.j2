"""
{{ project_name }} - Data Models

Pydantic models for {{ service_name }} data structures.
Provides validation and serialization for API data.

Generated by mcp-cli tool.
"""

from typing import Dict, Any, List, Optional, Union
from pydantic import BaseModel, Field
from datetime import datetime

class APIResponse(BaseModel):
    """Standard API response wrapper"""
    status_code: int
    data: Dict[str, Any] = Field(default_factory=dict)
    headers: Dict[str, str] = Field(default_factory=dict)

class APIError(Exception):
    """Custom exception for API errors"""
    
    def __init__(self, message: str, status_code: Optional[int] = None, details: Optional[Dict] = None):
        self.message = message
        self.status_code = status_code
        self.details = details or {}
        super().__init__(self.message)

class ServerResponse(BaseModel):
    """Standard server response format"""
    success: bool
    message: str
    data: Optional[Dict[str, Any]] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)

class ErrorResponse(BaseModel):
    """Standard error response format"""
    success: bool = False
    error: str
    details: Optional[Dict[str, Any]] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)

class ToolResult(BaseModel):
    """Result from tool execution"""
    tool_name: str
    success: bool
    data: Any
    execution_time: Optional[float] = None
    error_message: Optional[str] = None 