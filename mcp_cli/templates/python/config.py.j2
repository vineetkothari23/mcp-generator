"""
{{ project_name }} - Configuration Management

Configuration settings for the {{ service_name }} MCP server.
Uses Pydantic for validation and environment variable loading.

Generated by mcp-cli tool.
"""

import os
from typing import Optional, Dict, Any
from pydantic import Field, validator
from pydantic_settings import BaseSettings

class {{ service_name|pascal_case }}Config(BaseSettings):
    """
    Configuration for {{ service_name }} MCP server
    
    Loads settings from environment variables with MCP_ prefix.
    """
    
    # Server settings
    server_name: str = Field("{{ project_name }}", description="MCP server name")
    version: str = Field("{{ version }}", description="Server version")
    description: str = Field("{{ description }}", description="Server description")
    
    # API settings
    api_base_url: str = Field("https://api.example.com", description="Base URL for API")
    api_key: Optional[str] = Field(None, description="API authentication key")
    timeout: int = Field(30, description="Request timeout in seconds")
    max_retries: int = Field(3, description="Maximum retry attempts")
    
    # MCP settings
    max_tools: int = Field(50, description="Maximum number of tools to expose")
    enable_resources: bool = Field(True, description="Enable MCP resources")
    enable_logging: bool = Field(True, description="Enable detailed logging")
    
    # Server runtime settings
    host: str = Field("localhost", description="Server host")
    port: int = Field(8080, description="Server port")
    
    @validator('api_base_url')
    def validate_api_url(cls, v):
        """Validate API base URL format"""
        if not v.startswith(('http://', 'https://')):
            raise ValueError('API base URL must start with http:// or https://')
        return v.rstrip('/')
    
    @validator('timeout')
    def validate_timeout(cls, v):
        """Validate timeout is positive"""
        if v <= 0:
            raise ValueError('Timeout must be positive')
        return v
    
    class Config:
        env_file = ".env"
        env_prefix = "MCP_"
        case_sensitive = False 