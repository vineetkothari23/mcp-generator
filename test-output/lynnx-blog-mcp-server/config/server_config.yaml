# lynnx-blog-mcp-server MCP Server Configuration
# Generated by mcp-cli
# This file contains the configuration for the MCP (Model Context Protocol) server

# Server Information
server:
  name: "lynnx_blog_mcp_server"
  version: "1.0.0"
  description: "lynnx-blog-mcp-server MCP Server"
  
  # Server binding configuration
  host: "localhost"
  port: 8080
  
  # Protocol configuration
  protocol:
    version: "2024-11-05"  # MCP protocol version
    capabilities:
      # Core capabilities
      logging: true
      tools: true
      resources: true
      prompts: false
      
      # Advanced capabilities
      sampling: false
      roots: false
      
  # Connection settings
  connection:
    max_connections: 100
    timeout: 30
    keepalive: true
    
  # Security settings
  security:
    require_auth: false
    api_key_header: "X-API-Key"
    cors_enabled: true
    cors_origins: ["*"]

# Tools Configuration
tools:
  # Tool discovery and registration
  auto_discovery: true
  registry_path: "./tools"
  
  # Tool execution settings
  execution:
    timeout: 300  # 5 minutes default timeout
    max_concurrent: 10
    retry_attempts: 3
    retry_delay: 1.0
    
  # Tool validation
  validation:
    strict_schema: true
    validate_inputs: true
    validate_outputs: false
    
  # Tool categories (if using categorized tools)
  categories:
    enabled: true
    default_category: "general"
    
# Resources Configuration
resources:
  # Resource discovery
  auto_discovery: true
  base_path: "./resources"
  
  # Resource access control
  access:
    read_only: false
    allowed_extensions: [".txt", ".json", ".yaml", ".yml", ".md"]
    max_file_size: "10MB"
    
  # Resource caching
  caching:
    enabled: true
    ttl: 3600  # 1 hour
    max_cache_size: "100MB"

# Logging Configuration
logging:
  level: "INFO"
  format: "structured"  # or "plain"
  
  # Log destinations
  outputs:
    console:
      enabled: true
      level: "INFO"
    file:
      enabled: true
      path: "./logs/lynnx_blog_mcp_server.log"
      level: "DEBUG"
      rotation:
        max_size: "50MB"
        backup_count: 5
        
  # MCP-specific logging
  mcp_events:
    log_requests: true
    log_responses: false
    log_tool_calls: true
    log_resource_access: true

# Performance Settings
performance:
  # Memory management
  memory:
    max_heap_size: "512MB"
    gc_threshold: 0.8
    
  # Async/concurrency settings
  async:
    max_workers: 4
    event_loop_policy: "asyncio"
    
  # Caching
  cache:
    enabled: true
    backend: "memory"  # or "redis" if available
    default_ttl: 300
    
# Health Monitoring
health:
  enabled: true
  endpoint: "/health"
  checks:
    - name: "database"
      enabled: false
    - name: "external_api"
      enabled: false
    - name: "memory_usage"
      enabled: true
      threshold: 0.9

# Development Settings
development:
  debug: false
  hot_reload: false
  mock_external_apis: false
  
  # Testing support
  testing:
    enable_test_endpoints: false
    mock_tool_responses: false

# External Integrations
integrations:
  # API client configurations
  apis:
    # Example external API configuration
    # external_service:
    #   base_url: "https://api.example.com"
    #   timeout: 30
    #   retries: 3
    #   auth:
    #     type: "bearer"  # or "api_key", "basic"
    #     token: "${EXTERNAL_API_TOKEN}"
    
  # Database configuration (if needed)
  database:
    enabled: false
    # url: "postgresql://user:pass@localhost/dbname"
    # pool_size: 5
    # max_overflow: 10
    
  # Message queue configuration (if needed)
  message_queue:
    enabled: false
    # backend: "redis"
    # url: "redis://localhost:6379"

# Environment-specific overrides
environments:
  development:
    server:
      host: "0.0.0.0"
      port: 8080
    logging:
      level: "DEBUG"
    development:
      debug: true
      hot_reload: true
      
  production:
    server:
      host: "0.0.0.0"
      port: 80
    logging:
      level: "INFO"
      outputs:
        console:
          enabled: false
    performance:
      cache:
        enabled: true
        backend: "redis"
    health:
      enabled: true
      
  testing:
    server:
      port: 8081
    logging:
      level: "WARNING"
    development:
      enable_test_endpoints: true
      mock_tool_responses: true

# Custom Application Settings
application:
  # Application-specific configuration
  features:
    feature_flags:
      new_tool_api: false
      enhanced_logging: true
      experimental_resources: false
      
  # Rate limiting (if implemented)
  rate_limiting:
    enabled: false
    requests_per_minute: 100
    burst_size: 10
    
  # Metrics collection
  metrics:
    enabled: false
    backend: "prometheus"  # or "statsd"
    endpoint: "/metrics" 