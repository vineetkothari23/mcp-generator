"""
lynnx-blog-mcp-server - Test Configuration

Pytest configuration and fixtures for comprehensive testing.
Provides mock objects, test data, and setup utilities.

Generated by mcp-cli tool.
"""

import pytest
import asyncio
from unittest.mock import AsyncMock, MagicMock
from pathlib import Path
from typing import Dict, Any

from mcp.server import Server
from src.mcp_lynnx_blog_mcp_server.config import Lynnx_blog_mcp_serverConfig
from src.mcp_lynnx_blog_mcp_server.client import Lynnx_blog_mcp_serverClient
from src.mcp_lynnx_blog_mcp_server.server import Lynnx_blog_mcp_serverServer

# Test configuration
TEST_CONFIG = {
    "api_base_url": "https://api.test.example.com",
    "api_key": "test-api-key",
    "timeout": 10,
    "max_retries": 1,
    "server_name": "lynnx-blog-mcp-server-test",
    "version": "",
    "description": "Test server for lynnx-blog-mcp-server",
}

@pytest.fixture
def event_loop():
    """Create an event loop for async tests"""
    loop = asyncio.new_event_loop()
    yield loop
    loop.close()

@pytest.fixture
def test_config() -> Lynnx_blog_mcp_serverConfig:
    """Create test configuration object"""
    return Lynnx_blog_mcp_serverConfig(**TEST_CONFIG)

@pytest.fixture
def mock_client() -> AsyncMock:
    """Create mock API client for testing"""
    client = AsyncMock(spec=Lynnx_blog_mcp_serverClient)
    
    # Setup default responses
    client.make_request.return_value = AsyncMock(
        status_code=200,
        data={"message": "success", "data": []},
        headers={}
    )
    
    return client

@pytest.fixture
def mock_server() -> MagicMock:
    """Create mock MCP server for testing"""
    server = MagicMock(spec=Server)
    return server

@pytest.fixture
async def mcp_server(test_config: Lynnx_blog_mcp_serverConfig) -> Lynnx_blog_mcp_serverServer:
    """Create test MCP server instance"""
    server = Lynnx_blog_mcp_serverServer(test_config)
    yield server
    await server.stop()

@pytest.fixture
def sample_api_response() -> Dict[str, Any]:
    """Sample API response for testing"""
    return {
        "status": "success",
        "data": [
            {"id": 1, "name": "Test Item 1", "active": True},
            {"id": 2, "name": "Test Item 2", "active": False}
        ],
        "metadata": {
            "total": 2,
            "page": 1,
            "per_page": 10
        }
    }

@pytest.fixture
def sample_error_response() -> Dict[str, Any]:
    """Sample error response for testing"""
    return {
        "error": {
            "code": "INVALID_REQUEST",
            "message": "The request is invalid",
            "details": "Missing required parameter: id"
        }
    }

@pytest.fixture
def test_data_dir() -> Path:
    """Get test data directory path"""
    return Path(__file__).parent / "fixtures"

class AsyncContextManager:
    """Helper class for async context manager testing"""
    
    def __init__(self, return_value=None):
        self.return_value = return_value
    
    async def __aenter__(self):
        return self.return_value
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        pass

@pytest.fixture
def async_context_manager():
    """
    Factory for creating async context managers in tests
    
    Returns:
        callable: Factory function for async context managers
    """
    return AsyncContextManager

# Common test utilities
def assert_api_called_with(mock_client: AsyncMock, method: str, endpoint: str, **kwargs):
    """
    Assert that API client was called with specific parameters
    
    Args:
        mock_client: Mock client object
        method: Expected HTTP method
        endpoint: Expected endpoint
        **kwargs: Additional expected parameters
    """
    mock_client.make_request.assert_called_with(
        method=method,
        endpoint=endpoint,
        **kwargs
    )

def create_mock_response(status_code: int = 200, data: Any = None, headers: Dict = None):
    """
    Create mock API response object
    
    Args:
        status_code: HTTP status code
        data: Response data
        headers: Response headers
        
    Returns:
        AsyncMock: Mock response object
    """
    response = AsyncMock()
    response.status_code = status_code
    response.data = data or {}
    response.headers = headers or {}
    return response 