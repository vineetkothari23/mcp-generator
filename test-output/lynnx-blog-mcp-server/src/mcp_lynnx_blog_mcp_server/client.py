"""
lynnx-blog-mcp-server - API Client

HTTP client wrapper for lynnx_blog_mcp_server API communication.
Handles authentication, retries, and error handling.

Generated by mcp-cli tool.
"""

import httpx
import asyncio
import logging
from typing import Dict, Any, Optional, Union
from .config import Lynnx_blog_mcp_serverConfig
from .models import APIResponse, APIError

logger = logging.getLogger(__name__)

class Lynnx_blog_mcp_serverClient:
    """
    HTTP client for lynnx_blog_mcp_server API
    
    Provides async HTTP client with authentication, retry logic,
    and standardized error handling.
    """
    
    def __init__(self, config: Lynnx_blog_mcp_serverConfig):
        """
        Initialize the API client
        
        Args:
            config: Configuration object with API settings
        """
        self.config = config
        self.client = httpx.AsyncClient(
            base_url=config.api_base_url,
            timeout=config.timeout,
            headers=self._get_default_headers()
        )
    
    def _get_default_headers(self) -> Dict[str, str]:
        """Get default headers for API requests"""
        headers = {
            "User-Agent": f"lynnx-blog-mcp-server/{self.config.version}",
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
        
        if self.config.api_key:
            headers["Authorization"] = f"Bearer {self.config.api_key}"
        
        return headers
    
    async def make_request(
        self,
        method: str,
        endpoint: str,
        params: Optional[Dict[str, Any]] = None,
        data: Optional[Dict[str, Any]] = None,
        headers: Optional[Dict[str, str]] = None
    ) -> APIResponse:
        """
        Make HTTP request with retry logic
        
        Args:
            method: HTTP method (GET, POST, etc.)
            endpoint: API endpoint path
            params: Query parameters
            data: Request body data
            headers: Additional headers
            
        Returns:
            APIResponse: Standardized response object
            
        Raises:
            APIError: On API errors or network issues
        """
        url = endpoint.lstrip('/')
        request_headers = {**self._get_default_headers()}
        if headers:
            request_headers.update(headers)
        
        for attempt in range(self.config.max_retries + 1):
            try:
                response = await self.client.request(
                    method=method,
                    url=url,
                    params=params,
                    json=data,
                    headers=request_headers
                )
                
                # Handle successful response
                if response.status_code < 400:
                    return APIResponse(
                        status_code=response.status_code,
                        data=response.json() if response.content else {},
                        headers=dict(response.headers)
                    )
                
                # Handle error response
                error_data = {}
                try:
                    error_data = response.json()
                except:
                    error_data = {"message": response.text}
                
                if attempt < self.config.max_retries:
                    wait_time = 2 ** attempt
                    logger.warning(f"API request failed (attempt {attempt + 1}), retrying in {wait_time}s")
                    await asyncio.sleep(wait_time)
                    continue
                
                raise APIError(
                    status_code=response.status_code,
                    message=error_data.get('message', 'API request failed'),
                    details=error_data
                )
                
            except httpx.TimeoutException:
                if attempt < self.config.max_retries:
                    logger.warning(f"Request timeout (attempt {attempt + 1}), retrying...")
                    await asyncio.sleep(2 ** attempt)
                    continue
                raise APIError(message="Request timeout")
            
            except httpx.NetworkError as e:
                if attempt < self.config.max_retries:
                    logger.warning(f"Network error (attempt {attempt + 1}), retrying...")
                    await asyncio.sleep(2 ** attempt)
                    continue
                raise APIError(message=f"Network error: {str(e)}")
    
    async def close(self):
        """Close the HTTP client"""
        await self.client.aclose() 